module Main exposing (..)

import Html
import Icons exposing (..)
import Random
import Utils exposing (..)
import Color
import Element exposing (..)
import Element.Attributes exposing (..)
import Element.Events exposing (..)
import Style exposing (..)
import Style.Border as Border
import Style.Color as Color
import Style.Font as Font
import Style.Shadow as Shadow
import Style.Transition as Transition


type alias Flags =
    { seed : Int }


main =
    Html.programWithFlags
        { init = init
        , view = view
        , subscriptions = subscriptions
        , update = update
        }



-- Model


type alias Model =
    { seed : Random.Seed
    }


type alias Name =
    { prefix : String
    , suffix : String
    , icon : Icon
    }


prefixes =
    [ "Heart"
    , "Poodle"
    , "SSL"
    , "Crypto"
    , "Bit"
    , "YAML"
    , "JSON"
    , "Net"
    , "Wanna"
    , "iLove"
    , "Eth"
    , "Wire"
    , "Fake"
    , "Sand"
    , "Shell"
    , "Xen"
    , "SQL"
    , "Flash"
    , "i"
    , "PDF"
    , "MS"
    , "Java"
    ]


suffixes =
    [ "Bleed"
    , "Breach"
    , "CRIME"
    , "Hack"
    , "Scam"
    , "Worm"
    , "Locker"
    , "Virus"
    , "Cry"
    , "Gox"
    , "Leak"
    , "Lurker"
    , "Phishing"
    , "Shock"
    , "Slammer"
    , "Blast"
    , "chia"
    , "Overflow"
    ]


buttonText =
    [ "That's already in metasploit! Give me another."
    , "Oh, you mean CVE-1492? Try again."
    , "That's too real. Hit me again."
    ]


init : Flags -> ( Model, Cmd Msg )
init { seed } =
    { seed = Random.initialSeed seed
    }
        ! []



-- Msgs


type Msg
    = Regenerate



-- TODO: Load icon from noun project
-- Update


update : Msg -> Model -> ( Model, Cmd Msg )
update action model =
    case action of
        Regenerate ->
            { model | seed = Random.step randomName model.seed |> Tuple.second } ! []


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none



-- View


type Styles
    = None
    | Box
    | Logo
    | Title
    | Button
    | Attribution
    | Footer


view { seed } =
    let
        { prefix, suffix, icon } =
            Random.step randomName seed |> Tuple.first

        btnText =
            seed
                |> Random.step (Utils.select buttonText |> (Random.map <| Maybe.withDefault "Give me another one!"))
                |> Tuple.first
    in
        Element.root stylesheet <|
            column None
                []
                [ el None [ center, width (px 800) ] <|
                    column None
                        [ spacing 50, paddingTop 50 ]
                        [ column Box []
                            [ row None [ center, paddingBottom 30 ] [ text "Oh dear, today's vulnerability is..." ]
                            , row None
                                [ center ]
                                [ image icon.url Logo [ paddingTop 5, alt icon.alt ] empty
                                , el Title [ paddingTop 20, paddingLeft 10 ] <| paragraph None [] [ text prefix, text suffix ]
                                ]
                            , row None [ center, paddingTop 30 ] [ button <| el Button [ onClick Regenerate ] <| text btnText ]
                            , row None [ center, paddingTop 15 ] [ paragraph Attribution [] [ text "Icon is ", text icon.attribution ] ]
                            ]
                        , column Footer
                            []
                            [ paragraph None
                                []
                                [ text "Disclaimer: This website is for entertainment purposes only. Names are randomly generated, so any resemblance to a real vulnerability is complete chance." ]
                            , paragraph None
                                []
                                [ text "Copyright ", link "http://paulbellamy.com" <| el None [] (text "Paul Bellamy"), text ". 2017" ]
                            ]
                        ]
                ]


randomName : Random.Generator Name
randomName =
    let
        prefix =
            (Utils.select prefixes |> Random.map (Maybe.withDefault ""))

        nameFromPrefix =
            (\p ->
                Random.map2 (Name p)
                    (Utils.select suffixes |> Random.map (Maybe.withDefault ""))
                    (randomIcon p)
            )
    in
        prefix |> Random.andThen nameFromPrefix


stylesheet : StyleSheet Styles variation
stylesheet =
    Style.stylesheet
          -- It's handy to have a blank style
        [ style None
            [ Font.typeface [ "helvetica", "arial", "sans-serif" ]
            ]
        , style Box
            [ Color.text Color.black
            , Color.background Color.lightGrey
            , Color.border Color.lightGrey
              -- round all borders to 3px
            , Border.rounded 6
            , paddingHint 20
            ]
        , style Logo
            [ Font.size 26
            ]
        , style Title
            [ Font.size 50
            ]
        , style Button
            [ Transition.all
            , Font.size 18
            , Shadow.deep
            , Color.background Color.lightBlue
            , Color.border Color.lightBlue
            , Color.text Color.white
            , hover
              [ Color.background <| Color.rgb 94 139 198
              , Color.border <| Color.rgb 94 139 198
              , cursor "pointer"
              , Shadow.simple
              ]
            ]
        , style Attribution
            [ Font.size 8
            ]
        , style Footer
            [ Font.size 8
            ]
        ]
