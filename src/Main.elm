module Main exposing (..)

import Html exposing (Html, a, span, footer, h1, h2, h3, h4, h5, div, text, p, img, button)
import Html.Events exposing (onClick)
import Html.Attributes exposing (class, href, style, src, rel, alt)
import Icons exposing (..)
import Random
import Utils exposing (..)


type alias Flags =
    { seed : Int }


main =
    Html.programWithFlags
        { init = init
        , view = view
        , subscriptions = subscriptions
        , update = update
        }



-- Model


type alias Model =
    { seed : Random.Seed
    }


type alias Name =
    { prefix : String
    , suffix : String
    , icon : Icon
    }


prefixes =
    [ "Heart"
    , "Poodle"
    , "SSL"
    , "Crypto"
    , "Bit"
    , "YAML"
    , "JSON"
    , "Net"
    , "Wanna"
    , "iLove"
    , "Eth"
    ]


suffixes =
    [ "Bleed"
    , "Breach"
    , "CRIME"
    , "Hack"
    , "Scam"
    , "Worm"
    , "Locker"
    , "Virus"
    , "Cry"
    , "Gox"
    , "Leak"
    ]


buttonText =
    [ "That's already in metasploit! Give me another."
    , "Oh, you mean CVE-1492? Try again."
    , "That's too real. Hit me again."
    ]


init : Flags -> ( Model, Cmd Msg )
init { seed } =
    { seed = Random.initialSeed seed
    }
        ! []



-- Msgs


type Msg
    = Regenerate



-- TODO: Load icon from noun project
-- Update


update : Msg -> Model -> ( Model, Cmd Msg )
update action model =
    case action of
        Regenerate ->
            { model | seed = Random.step randomName model.seed |> Tuple.second } ! []


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none



-- View


view { seed } =
    let
        { prefix, suffix, icon } =
            Random.step randomName seed |> Tuple.first

        btnText =
            seed
                |> Random.step (select buttonText |> (Random.map <| Maybe.withDefault "Give me another one!"))
                |> Tuple.first
    in
        div [ style [ ( "text-align", "center" ) ] ]
            [ h4 [] [ text "Oh dear, looks like the new vulnerability is..." ]
            , p []
                [ img [ src icon.url, alt icon.alt, style [ ( "margin-right", "15px"), ("margin-bottom", "36px" ) ] ] []
                , h1 [ style [ ( "display", "inline-block" ), ("margin-bottom", "0") ] ] [ text prefix, text suffix ]
                ]
            , h5 [] [ text "Icon is ", text icon.attribution ]
            , p [] [ button [ onClick Regenerate, class "mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent" ] [ text btnText ] ]
            ]


randomName : Random.Generator Name
randomName =
    let
        prefix =
            (select prefixes |> Random.map (Maybe.withDefault ""))

        nameFromPrefix =
            (\p ->
                Random.map2 (Name p)
                    (select suffixes |> Random.map (Maybe.withDefault ""))
                    (randomIcon p)
            )
    in
        prefix |> Random.andThen nameFromPrefix
