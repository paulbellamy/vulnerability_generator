module Main exposing (..)

import Html
import Icons exposing (..)
import Random
import Utils exposing (..)
import Color
import Element exposing (..)
import Element.Attributes exposing (..)
import Element.Events exposing (..)
import String exposing (toInt)
import Style exposing (..)
import Style.Border as Border
import Style.Color as Color
import Style.Font as Font
import Style.Shadow as Shadow
import Style.Transition as Transition
import Window
import Navigation exposing (newUrl, Location)


type alias Flags =
    { seed : Int
    , width : Int
    , height : Int
    }


main =
    Navigation.programWithFlags
      UrlChange
        { init = init
        , view = view
        , subscriptions = subscriptions
        , update = update
        }



-- Model


type alias Model =
    { seed : Random.Seed
    , windowSize : Window.Size
    , location : Location
    }


type alias Name =
    { prefix : String
    , suffix : String
    , icon : Icon
    }


prefixes =
    [ "Heart"
    , "Poodle"
    , "SSL"
    , "Crypto"
    , "Bit"
    , "YAML"
    , "JSON"
    , "Net"
    , "Wanna"
    , "iLove"
    , "Eth"
    , "Wire"
    , "Fake"
    , "Sand"
    , "Shell"
    , "Xen"
    , "SQL"
    , "Flash"
    , "i"
    , "PDF"
    , "MS"
    , "Java"
    , "Melt"
    , "Spectre"
    , "Web"
    ]


suffixes =
    [ "Bleed"
    , "Breach"
    , "CRIME"
    , "Hack"
    , "Scam"
    , "Worm"
    , "Locker"
    , "Virus"
    , "Cry"
    , "Gox"
    , "Leak"
    , "Lurker"
    , "Phishing"
    , "Shock"
    , "Slammer"
    , "Blast"
    , "chia"
    , "Overflow"
    , "down"
    , "Fall"
    ]


buttonText =
    [ "That's already in metasploit! Gimme another!"
    , "Oh, you mean CVE-1492? Gimme another!"
    , "That's too real. Gimme another!"
    ]


init : Flags -> Location -> ( Model, Cmd Msg )
init { seed, width, height } location =
    update
      (UrlChange location)
      { seed = Random.initialSeed seed
      , windowSize = Window.Size width height
      , location = location
      }

-- Msgs


type Msg
    = Regenerate
    | WindowResize Window.Size
    | UrlChange Location



-- TODO: Load icon from noun project
-- Update

update : Msg -> Model -> ( Model, Cmd Msg )
update action model =
    case action of
        Regenerate ->
            model ! [ newUrl <| model.location.pathname ++ "#" ++ (toString <| Tuple.first <| Random.step randomUint model.seed) ]

        WindowResize size ->
            { model | windowSize = size } ! []

        UrlChange location ->
              case parseHash location.hash of
                Ok seed ->
                  { model
                  | seed = seed
                  , location = location
                  } ! []
                Err _ ->
                  update Regenerate model


parseHash : String -> Result String Random.Seed
parseHash hash =
  hash
    |> String.dropLeft 1
    |> toInt
    |> Result.map Random.initialSeed


nextSeed : Random.Seed -> Random.Seed
nextSeed seed =
  Random.step randomName seed |> Tuple.second

subscriptions : Model -> Sub Msg
subscriptions model =
    Window.resizes WindowResize



-- View


type Styles
    = None
    | Box
    | Logo
    | Title
    | Button
    | Attribution
    | Footer


containerWidth device =
    if device.phone then
        width (percent 100)
    else if device.width > 800 then
        width (px 800)
    else
        width (percent 80)


view { seed, windowSize } =
    let
        { prefix, suffix, icon } =
            Random.step randomName seed |> Tuple.first

        btnText =
            seed
                |> Random.step (Utils.select buttonText |> (Random.map <| Maybe.withDefault "Give me another one!"))
                |> Tuple.first

        device =
            classifyDevice windowSize

        headerSize =
            if device.phone then
                0
            else
                50

        titleTopPadding =
            if device.phone then
                30
            else
                20
    in
        Element.root (stylesheet device) <|
            column None
                [ width <| percent 100 ]
                [ el None [ center, containerWidth device ] <|
                    column None
                        [ spacing headerSize, paddingTop headerSize ]
                        [ column Box
                            []
                            [ row None [ paddingBottom 30 ] [ text "Since HeartBleed, respectable vulnerabilities need a menacing name, and a swanky logo." ]
                            , row None [ paddingBottom 30 ] [ text "Looks like today's randomly-generated vulnerability is..." ]
                            , row None
                                [ center ]
                                [ image icon.url Logo [ paddingTop 5, alt icon.alt ] empty
                                , el Title [ paddingTop titleTopPadding, paddingLeft 10 ] <| paragraph None [] [ text prefix, text suffix ]
                                ]
                            , row None [ center, paddingTop 30 ] [ button <| el Button [ onClick Regenerate ] <| text btnText ]
                            , row None [ center, paddingTop 15 ] [ paragraph Attribution [] [ text "Icon is ", text icon.attribution ] ]
                            ]
                        , column Footer
                            [ center ]
                            [ paragraph None
                                []
                                [ link "http://paulbellamy.com" <| el None [] (text "Who made this?") ]
                            ]
                        ]
                ]



randomUint : Random.Generator Int
randomUint =
    Random.int 0 Random.maxInt


randomName : Random.Generator Name
randomName =
    let
        prefix =
            (Utils.select prefixes |> Random.map (Maybe.withDefault ""))

        nameFromPrefix =
            (\p ->
                Random.map2 (Name p)
                    (Utils.select suffixes |> Random.map (Maybe.withDefault ""))
                    (randomIcon p)
            )
    in
        prefix |> Random.andThen nameFromPrefix


fonts =
    Font.typeface [ "Lato", "Helvetica Neue", "Helvetica", "arial", "sans-serif" ]


stylesheet : Device -> StyleSheet Styles variation
stylesheet device =
    Style.stylesheet
        -- It's handy to have a blank style
        [ style None [ fonts ]
        , style Box
            [ Color.text Color.black
            , Color.background Color.lightGrey
            , Color.border Color.lightGrey
              -- round all borders to 3px
            , Border.rounded 6
            , paddingHint 20
            ]
        , style Logo
            [ Font.size 26
            ]
        , style Title
            [ Font.size <|
                if device.phone then
                    28
                else
                    50
            ]
        , style Button
            [ Transition.all
            , Font.size 18
            , Shadow.deep
            , Color.background Color.lightBlue
            , Color.border Color.lightBlue
            , Color.text Color.white
            , hover
                [ Color.background <| Color.rgb 94 139 198
                , Color.border <| Color.rgb 94 139 198
                , cursor "pointer"
                , Shadow.simple
                ]
            ]
        , style Attribution
            [ Font.size 10
            ]
        , style Footer
            []
        ]
